//функции получения данных с сервера и отправки данных на сервер являются сервисными функциями и их функционал переведен в отдельный файл
// реализация отправки данных на сервер через функцию.
// перед функцией ставим  async что означает что внутри функции будет асинхронный код,если этого не сделать,то const res будет присвоено несуществующее значение и будет ошибка,также res.json() не будет что обрабатывать.Так как мы не знаем сколько времени займет отправка данных методом fetch то  мы говорим - подожди ответ сервера и присвой const этот ответ (await ставим перед той операцией которую необходимо дождатся)
const postData = async (url, data) => {
    const res = await fetch(url, {
        method: 'POST',
        headers: {
            'content-type': 'application/json'
        },
        body: data,
    });

    return await res.json(); //дождись и верни результат преобразованыий в формат json. метод возвращает обязательство при благоприятном исходе вернуть объект, который получен после JSON.parse(текст тела ответа)
};

// получение данных для построения карточек с  товарами из db.json
// У промиса который возвращается из fetch есть свойства status -то код ответа http, и ок - положительный исход запроса.Если с запросом что-то пошло не так то создаем обьект ошибки и передаем текст ошибки пользователю
async function getResource(url) {
    let res = await fetch(url);

    if (!res.ok) {
        throw new Error(`Could not fetch ${url}, status: ${res.status}`);
    }

    return await res.json();
}

export { postData };
export { getResource };